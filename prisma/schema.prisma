generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DB_URL")
}

model User {
    userId         String       @id @db.VarChar(50)
    password       String       @db.VarChar(100)
    birthday       DateTime?    @db.Date
    nickname       String       @unique @db.VarChar(50)
    email          String       @db.VarChar(100)
    emailToken     String       @db.VarChar(100)
    logInType      String?      @db.VarChar(10)
    profilePicture String       @default("/public/docs/soma_logo.png") @db.VarChar(200)
    followerCnt    Int          @default(0)
    description    String       @db.Text
    uploadVideoCnt Int          @default(0)
    block          Boolean      @default(false)
    facebook       String?      @db.VarChar(150)
    instagram      String?      @db.VarChar(150)
    linkedin       String?      @db.VarChar(150)
    twitter        String?      @db.VarChar(150)
    admin          Boolean      @default(false)
    proTag         Boolean      @default(false)
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    deletedAt      DateTime?
    followFrom     Follower[]   @relation("followFrom")
    followTo       Follower[]   @relation("followTo")
    Video          Video[]
    VideoLiker     VideoLiker[]

    @@index([email], name: "email")
}

model VideoLiker {
    liker           String    @db.VarChar(50)
    videoId         String
    uploader        String    @db.VarChar(50)
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?
    User            User      @relation(fields: [liker], references: [userId])
    WhoVideoUpload  Video     @relation("WhoVideoUpload", fields: [uploader], references: [uploader])
    WhatVideoUpload Video     @relation("WhatVideoUpload", fields: [videoId], references: [id])

    @@id([liker, uploader, videoId])
    @@index([uploader], name: "uploader")
    @@index([videoId], name: "videoId")
}

model Video {
    id                 String       @unique @default(uuid())
    uploader           String       @db.VarChar(50)
    title              String       @db.VarChar(50)
    description        String       @db.Text
    category           String?      @db.VarChar(20)
    url                String       @db.VarChar(500)
    thumbnail          String       @db.VarChar(500)
    likeCnt            Int          @default(0)
    viewCnt            Int          @default(0)
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt
    deletedAt          DateTime?
    User               User         @relation(fields: [uploader], references: [userId])
    WhoVideoUpload     VideoLiker[] @relation("WhoVideoUpload")
    WhatVideoUpload    VideoLiker[] @relation("WhatVideoUpload")
    WhoVideoUploadTag  VideoTag[]   @relation("WhoVideoUploadTag")
    WhatVideoUploadTag VideoTag[]   @relation("WhatVideoUploadTag")

    @@id([uploader, id])
}

model VideoTag {
    videoId            String
    uploader           String    @db.VarChar(50)
    tagName            String    @db.VarChar(30)
    createdAt          DateTime  @default(now())
    updatedAt          DateTime  @updatedAt
    deletedAt          DateTime?
    WhoVideoUploadTag  Video     @relation("WhoVideoUploadTag", fields: [uploader], references: [uploader])
    WhatVideoUploadTag Video     @relation("WhatVideoUploadTag", fields: [videoId], references: [id])

    @@id([videoId, uploader, tagName])
    @@index([uploader], name: "uploader")
}

model Follower {
    followerId  String    @db.VarChar(50)
    followingId String    @db.VarChar(50)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    followFrom  User      @relation("followFrom", fields: [followerId], references: [userId])
    followTo    User      @relation("followTo", fields: [followingId], references: [userId])

    @@id([followerId, followingId])
    @@index([followingId], name: "followingId")
}

model Post {
    id        Int       @id @default(autoincrement())
    title     String    @db.VarChar(100)
    contents  String    @db.Text
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}
