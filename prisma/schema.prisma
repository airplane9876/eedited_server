generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DB_DEVELOPMENT_URL")
}

model User {
    userId          String            @id @db.VarChar(50)
    password        String            @db.VarChar(100)
    birthday        DateTime?         @db.Date
    nickname        String            @unique @db.VarChar(10)
    email           String            @unique @db.VarChar(100)
    followerCnt     Int               @default(0)
    uploadVideoCnt  Int               @default(0)
    proTag          Boolean           @default(false)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    VideoLiker      VideoLiker[]
    Video           Video[]
    ChatParticipant ChatParticipant[]

    @@index([email], name: "email")
}

model VideoLiker {
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    userId          String   @db.VarChar(50)
    videoId         String
    uploader        String   @db.VarChar(50)
    User            User     @relation(fields: [userId], references: [userId])
    WhoVideoUpload  Video    @relation("WhoVideoUpload", fields: [uploader], references: [uploader])
    WhatVideoUpload Video    @relation("WhatVideoUpload", fields: [videoId], references: [id])

    @@id([uploader, userId, videoId])
}

model Video {
    uploader        String       @db.VarChar(50)
    id              String       @unique @default(uuid())
    title           String       @db.VarChar(50)
    discription     String       @db.Text
    url             String       @db.VarChar(100)
    likeCnt         Int          @default(0)
    viewCnt         Int          @default(0)
    createdAt       DateTime     @default(now())
    updatedAt       DateTime     @updatedAt
    User            User         @relation(fields: [uploader], references: [userId])
    WhoVideoUpload  VideoLiker[] @relation("WhoVideoUpload")
    WhatVideoUpload VideoLiker[] @relation("WhatVideoUpload")

    @@id([uploader, id])
}

model Chatroom {
    id              String            @id @default(uuid())
    participantCnt  Int               @default(0)
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    ChatParticipant ChatParticipant[]
}

model ChatParticipant {
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    chatroomId    String
    userId        String   @db.VarChar(50)
    Chatroom      Chatroom @relation(fields: [chatroomId], references: [id])
    User          User     @relation(fields: [userId], references: [userId])
    WhereChatSent Chat[]   @relation("WhereChatSent")
    WhoChatSent   Chat[]   @relation("WhoChatSent")

    @@id([chatroomId, userId])
}

model Chat {
    chatroomId    String
    from          String          @db.VarChar(50)
    id            String          @unique @default(uuid())
    message       String          @db.Text
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
    WhereChatSent ChatParticipant @relation("WhereChatSent", fields: [chatroomId], references: [chatroomId])
    WhoChatSent   ChatParticipant @relation("WhoChatSent", fields: [from], references: [userId])

    @@id([chatroomId, from, id])
}
