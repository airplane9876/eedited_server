openapi: 3.0.0
info:
  version: 0.4.0
  title: eedited API docs
  description: eedited의 API 문서입니다
  license:
    name: MIT
servers:
  - url: 'http://localhost:3000/'
paths:
  /auth/signup:
    post:
      tags:
        - /auth
      summary: SignUp
      requestBody:
        description: need user's personal info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
                email:
                  type: string
                  format: email
                birthday:
                  type: string
                  format: date
                nickname:
                  type: string
                profilePicture:
                  type: string
                  format: uri
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/auth/signup - DB Error : Checks DB Connection or CRUD'
  /auth/signup/email:
    get:
      tags:
        - /auth
      summary: Send authentication number for membership.
      parameters:
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: user's email
      responses:
        '200':
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      randomNum:
                        type: integer
                        minimum: 10000
                        maximum: 99999
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/mail - gmail err
  /auth/check:
    get:
      tags:
        - /auth
      summary: return loggedIn user's info
      responses:
        '200':
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/User'
  /auth/login:
    post:
      tags:
        - /auth
      summary: login router
      requestBody:
        description: user's ID and passwd
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                password:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '401':
          allOf:
            - $ref: '#/components/responses/unauthorizedResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/login - Unregistered user or incorrect password
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/login - Passport Error
  /auth/logout:
    get:
      tags:
        - /auth
      summary: logout router
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
  /auth/find/id:
    post:
      tags:
        - /auth
      summary: find user's ID router
      requestBody:
        description: user's email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '401':
          allOf:
            - $ref: '#/components/responses/unauthorizedResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: auth/find/id not exists email
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: auth/find/id router error
  /auth/find/password:
    post:
      tags:
        - /auth
      summary: find user's passwd router
      requestBody:
        description: user's ID and email
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                email:
                  type: string
                  format: email
      responses:
        '200':
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      password:
                        type: string
        '401':
          allOf:
            - $ref: '#/components/responses/unauthorizedResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/find/password incorrect email
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/find/password server error
  /auth/change/password:
    post:
      tags:
        - /auth
      summary: change password router
      requestBody:
        description: user's ID and new passwd
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                newpassword:
                  type: string
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /auth/change/password server err
  '/auth/{userId}':
    delete:
      tags:
        - /auth
      summary: withdraw user
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          description: user's Id
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: already not loggedIn
        '401':
          allOf:
            - $ref: '#/components/responses/unauthorizedResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/auth/:userId Unauthorized'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/auth/:userId server error'
  /video/:
    get:
      tags:
        - /video
      summary: All videos are brought in units of 20.
      parameters:
        - in: query
          name: pageStr
          schema:
            type: string
          description: pageNum
      responses:
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/${pageStr} not valid input'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/${pageStr} router error'
        200 and not loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
        200 and loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      WhatVideoUpload:
                        type: array
                        items:
                          type: object
                          properties:
                            liker:
                              type: string
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
  /video/sort/latest:
    get:
      tags:
        - /video
      summary: sort all videos in the latest order
      parameters:
        - in: query
          name: pageStr
          schema:
            type: string
          description: pageNum
      responses:
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/${pageStr} not valid input'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /video/sort/latest router error
        200 and not loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
        200 and loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      WhatVideoUpload:
                        type: array
                        items:
                          type: object
                          properties:
                            liker:
                              type: string
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
  /video/sort/thumbup:
    get:
      tags:
        - /video
      summary: sort all videos in the thumbup order
      parameters:
        - in: query
          name: pageStr
          schema:
            type: string
          description: pageNum
      responses:
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/${pageStr} not valid input'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /video/sort/thumbup router error
        200 and not loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
        200 and loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      WhatVideoUpload:
                        type: array
                        items:
                          type: object
                          properties:
                            liker:
                              type: string
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
  /video/upload:
    post:
      tags:
        - /video
      summary: video upload router
      requestBody:
        description: video's info
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    title:
                      type: string
                    discription:
                      type: string
                    url:
                      type: string
                      format: uri
                    thumbnail:
                      type: string
                      format: uri
                    tags:
                      type: array
                      items:
                        type: string
                - $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /video/upload router error
  /video/getTags:
    post:
      tags:
        - /video
      summary: Create tags using thumbnails
      requestBody:
        description: thumbnail's url
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                thumbnail:
                  type: string
                  format: uri
      responses:
        '200':
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: array
                    items:
                      type: string
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /video/getTags router error
  '/video/{videoId}':
    get:
      tags:
        - /video
      summary: 'It brings up one video corresponding to {videoId}.'
      parameters:
        - in: path
          name: videoId
          schema:
            type: string
            format: uuid
          description: videoId
      responses:
        '404':
          allOf:
            - $ref: '#/components/responses/notFoundResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/:videoId not exists video'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /video/upload router error
        200 and not loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
                      WhatVideoUploadTag:
                        type: array
                        items:
                          type: object
                          properties:
                            tagName:
                              type: string
        200 and loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
                          followTo:
                            type: array
                            items:
                              type: object
                              properties:
                                followerId:
                                  type: string
                      WhatVideoUploadTag:
                        type: array
                        items:
                          type: object
                          properties:
                            tagName:
                              type: string
  '/video/{videoId}/like':
    patch:
      tags:
        - /video
      summary: video like router
      parameters:
        - in: path
          name: videoId
          schema:
            type: string
            format: uuid
          description: videoId
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '404':
          allOf:
            - $ref: '#/components/responses/notFoundResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/:videoId/like user undefind or video not exists'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/:videoId/like router error'
  '/video/{videoId}/delete':
    get:
      tags:
        - /video
      summary: delete video router
      parameters:
        - in: path
          name: videoId
          schema:
            type: string
            format: uuid
          description: videoId
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/delete/:videoId not exists video or not permissioned user'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/:videoId/delete router error'
  '/video/{userId}/list':
    get:
      tags:
        - /video
      summary: It brings up a list of videos uploaded by userId
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          description: userId
        - in: query
          name: pageStr
          schema:
            type: string
          description: pageNum
      responses:
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/${pageStr} not valid input'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/video/:userId/list router error'
        200 and not loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
        200 and loggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Video'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          nickname:
                            type: string
                      WhatVideoUpload:
                        type: list
                        items:
                          type: object
                          properties:
                            liker:
                              type: string
  '/user/{userId}/follow':
    patch:
      tags:
        - /user
      summary: loggedIn user follows userId
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          description: userId
      responses:
        '200':
          $ref: '#/components/responses/successResponse'
        '404':
          allOf:
            - $ref: '#/components/responses/notFoundResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/:userId/like user not found'
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/user/${userId}/follow router error'
  '/user/{userId}':
    get:
      tags:
        - /user
      summary: 'get a user''s all of info with videos, tags, follows, etc.'
      description: 유저정보를 확인할 수 있는 라우터입니다.<br> 위쪽은 딱 봐도 유저정보<br> Video에는 해당 유저가 업로드한 영상이 array형태로 담겨 나옵니다.<br> 여기서 현재 로그인한 유저가 좋아요를 누른 영상의 경우 WhatVideoUpload 에 있는 liker에 현재 로그인한 유저의 아이디가 담겨서 나옵니다.<br> followFrom은 현재 보고있는 프로필에 해당하는 유저가 팔로우한 목록입니다. followTo는 현재 로그인한 유저가 프로필에 해당하는 유저를 팔로우한 경우 followerId에 현재 로그인한 유저의 아이디가 담겨서 나옵니다.
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          description: userId
      responses:
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: '/user/${userId} router error'
        200 and LoggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      userId:
                        type: string
                      password:
                        type: string
                      birthday:
                        type: string
                        format: date
                      nickname:
                        type: string
                      email:
                        type: string
                        format: email
                      profilePicture:
                        type: string
                        format: uri
                      followerCnt:
                        type: integer
                        minimum: 0
                      uploadVideoCnt:
                        type: integer
                        minimum: 0
                      proTag:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                      deletedAt:
                        type: string
                        format: date-time
                      Video:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            uploader:
                              type: string
                            title:
                              type: string
                            discription:
                              type: string
                            url:
                              type: string
                              format: uri
                            thumbnail:
                              type: string
                              format: uri
                            likeCnt:
                              type: integer
                              minimum: 0
                            viewCnt:
                              type: integer
                              minimum: 0
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                            WhoVideoUploadTag:
                              type: array
                              items:
                                type: object
                                properties:
                                  tagName:
                                    type: string
                            WhatVideoUpload:
                              type: array
                              items:
                                type: object
                                properties:
                                  liker:
                                    type: string
                      followFrom:
                        type: array
                        items:
                          type: object
                          properties:
                            followingId:
                              type: string
                      followTo:
                        type: array
                        items:
                          type: object
                          properties:
                            followerId:
                              type: string
        200 and not LoggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      userId:
                        type: string
                      password:
                        type: string
                      birthday:
                        type: string
                        format: date
                      nickname:
                        type: string
                      email:
                        type: string
                        format: email
                      profilePicture:
                        type: string
                        format: uri
                      followerCnt:
                        type: integer
                        minimum: 0
                      uploadVideoCnt:
                        type: integer
                        minimum: 0
                      proTag:
                        type: boolean
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                      deletedAt:
                        type: string
                        format: date-time
                      Video:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            uploader:
                              type: string
                            title:
                              type: string
                            discription:
                              type: string
                            url:
                              type: string
                              format: uri
                            thumbnail:
                              type: string
                              format: uri
                            likeCnt:
                              type: integer
                              minimum: 0
                            viewCnt:
                              type: integer
                              minimum: 0
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                            WhoVideoUploadTag:
                              type: array
                              items:
                                type: object
                                properties:
                                  tagName:
                                    type: string
                      followFrom:
                        type: array
                        items:
                          type: object
                          properties:
                            followingId:
                              type: string
  /search/:
    get:
      tags:
        - /search
      summary: search router
      description: videos의 liker는 현재 로그인한 유저가 좋아한 영상이면 로그인한 유저의 아이디가 있고 그 외에는 빈 배열<br> users의 followerId도 같은 원리이다.<br> 그리고 동영상목록 뱉는 라우터처럼 얘도 유저랑 영상 한 페이지당 각각 20개씩 뱉는다.
      parameters:
        - in: path
          name: toFind
          schema:
            type: string
          description: string to find
        - in: path
          name: pageStr
          schema:
            type: string
          description: page Number
      responses:
        '400':
          allOf:
            - $ref: '#/components/responses/badRequestResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /search/ page not valid input
        '500':
          allOf:
            - $ref: '#/components/responses/routerErrorResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      info:
                        type: string
                        example: /search/ router error
        200 and LoggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                            password:
                              type: string
                            birthday:
                              type: string
                              format: date
                            nickname:
                              type: string
                            email:
                              type: string
                              format: email
                            profilePicture:
                              type: string
                              format: uri
                            followerCnt:
                              type: integer
                              minimum: 0
                            uploadVideoCnt:
                              type: integer
                              minimum: 0
                            proTag:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                            followTo:
                              type: array
                              items:
                                type: object
                                properties:
                                  followerId:
                                    type: string
                      videos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            uploader:
                              type: string
                            title:
                              type: string
                            discription:
                              type: string
                            url:
                              type: string
                              format: uri
                            thumbnail:
                              type: string
                              format: uri
                            likeCnt:
                              type: integer
                              minimum: 0
                            viewCnt:
                              type: integer
                              minimum: 0
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                            WhatVideoUpload:
                              type: array
                              items:
                                type: object
                                properties:
                                  liker:
                                    type: string
                            User:
                              type: object
                              properties:
                                nickname:
                                  type: string
        200 and not LoggedIn:
          allOf:
            - $ref: '#/components/responses/successResponse'
            - content:
                application/json:
                  schema:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          properties:
                            userId:
                              type: string
                            password:
                              type: string
                            birthday:
                              type: string
                              format: date
                            nickname:
                              type: string
                            email:
                              type: string
                              format: email
                            profilePicture:
                              type: string
                              format: uri
                            followerCnt:
                              type: integer
                              minimum: 0
                            uploadVideoCnt:
                              type: integer
                              minimum: 0
                            proTag:
                              type: boolean
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                      videos:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              format: uuid
                            uploader:
                              type: string
                            title:
                              type: string
                            discription:
                              type: string
                            url:
                              type: string
                              format: uri
                            thumbnail:
                              type: string
                              format: uri
                            likeCnt:
                              type: integer
                              minimum: 0
                            viewCnt:
                              type: integer
                              minimum: 0
                            createdAt:
                              type: string
                              format: date-time
                            updatedAt:
                              type: string
                              format: date-time
                            deletedAt:
                              type: string
                              format: date-time
                            User:
                              type: object
                              properties:
                                nickname:
                                  type: string
components:
  schemas:
    User:
      type: object
      properties:
        userId:
          type: string
        password:
          type: string
        birthday:
          type: string
          format: date
        nickname:
          type: string
        email:
          type: string
          format: email
        profilePicture:
          type: string
          format: uri
        followerCnt:
          type: integer
          minimum: 0
        uploadVideoCnt:
          type: integer
          minimum: 0
        proTag:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
    Video:
      type: object
      properties:
        id:
          type: string
          format: uuid
        uploader:
          type: string
        title:
          type: string
        discription:
          type: string
        url:
          type: string
          format: uri
        thumbnail:
          type: string
          format: uri
        likeCnt:
          type: integer
          minimum: 0
        viewCnt:
          type: integer
          minimum: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
  responses:
    successResponse:
      description: successful request
      content:
        application/json:
          schema:
            type: object
            properties: null
    routerErrorResponse:
      description: router error
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
    unauthorizedResponse:
      description: unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
    badRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
    notFoundResponse:
      description: 404 not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
    forbiddenResponse:
      description: not allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              info:
                type: string
